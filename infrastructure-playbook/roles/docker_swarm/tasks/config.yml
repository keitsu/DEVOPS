---

- name: Uninstall old versions of Docker
  apt:
    name: "{{ item }}"
    state: absent
  with_items:
    - docker
    - docker-engine
    - docker.io

- name: debian | installing pre-reqs
  apt:
    name: "{{ item }}"
    state: present
  become: true
  with_items:
    - 'apt-transport-https'
    - 'ca-certificates'
    - 'software-properties-common'



- name: Ensure the system can use the HTTPS transport for APT
  stat:
    path: /usr/lib/apt/methods/https
  register: apt_https_transport

- name: Import docker GPG key to apt
  apt_key:
    url: "{{ docker_apt_key_url }}"
    state: present

- name: Add docker repository
  apt_repository:
    repo: 'deb {{ docker_apt_repository_url }}/{{ docker_distribution }} {{ docker_distribution_release }} stable'
    state: present

- name: Install docker
  apt:
    pkg: "{{ docker_package }}={{ docker_debian_version }}"
    state: present

- name: Create docker.service.d directory
  file:
    path: "{{ docker_override_path }}"
    state: directory
  when: docker_override_options

- name: Configure docker
  template:
    src: service_override.conf
    dest: "{{ docker_override_path }}/override.conf"
    owner: root
    mode: 0644
  when: docker_override_options
  notify:
    - reload systemd
    - restart docker


- name: Clean artifact path
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /usr/local/bin/docker-compose
    - /usr/local/bin/docker-machine

- name: Install Docker Compose
  get_url:
    url: https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-Linux-x86_64
    dest: "{{ docker_compose_path }}"
    mode: 0755

- name: Install Docker Machine.
  get_url:
    url: https://github.com/docker/machine/releases/download/{{ docker_machine_version }}/docker-machine-Linux-x86_64
    dest: "{{ docker_machine_path }}"
    mode: 0755

- name: Install bash-completion
  apt: name={{ item }}
  with_items:
   - bash-completion

- name: Install Docker Machine bash_completion
  get_url:
    url: https://raw.githubusercontent.com/docker/machine/{{ docker_machine_version }}/contrib/completion/bash/{{ item }}
    dest: /etc/bash_completion.d/{{ item }}
  with_items:
    - docker-machine-prompt.bash
    - docker-machine-wrapper.bash
    - docker-machine.bash

- name: LEAVE OLD SWARM ( A AMELIORER)
  shell: 'docker swarm leave --force '
#Mise en place du docker swarm
- name: Creation d'un group de manager
  shell: 'docker swarm init --advertise-addr={{ swarm_iface | default("eth0") }}:2377'
  when:
      - "'swarm_manager_operational' not in groups"
      - ansible_host == '172.16.226.14'
  register: bootstrap_first_node

- name: add initialized host to swarm_manager_operational group
  add_host:
      hostname: "{{ play_hosts[0] }}"
      groups: swarm_manager_operational
  when:
      - bootstrap_first_node is changed
      - ansible_host == '172.16.226.14'

- name: retrieve swarm worker token
  shell: 'docker swarm join-token -q worker'
  register: swarm_worker_token
  when:
      - ansible_host == '172.16.226.14'

- name: populate list of manager ips
  add_host:
       hostname: "{{ hostvars[item]['ansible_' + iface]['ipv4']['address'] }}"
       groups: swarm_manager_ips
  with_items: "{{ play_hosts }}"
  when: ansible_host == '172.16.226.14'

- name: join worker nodes to cluster
  shell: "docker swarm join --advertise-addr={{ swarm_iface | default('eth0') }}:2377 --token={{ token }} {{ groups['swarm_manager_ips'][0] }}:2377"
  when: ansible_host == "172.16.226.10" or
        ansible_host == "172.16.226.1"

- name: docker network config
  shell: 'docker network create -d overlay --subnet 10.1.9.0/24 multi-host-net'
  when: ansible_host == '172.16.226.14'

...
